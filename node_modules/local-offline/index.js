const local = (key, value, not_exit = false) => {

    let type;
    let setType = { boolean: 0, function: 1, number: 2, object: 3, string: 4 };
    let getType = { 0: 'boolean', 1: 'function', 2: 'number', 3: 'object', 4: 'string' };

    // Set Value ---------------------------------------------------------------

    if (key && value && !not_exit) {
        type = typeof value;
        switch (type) {
            case 'boolean':
                localStorage.setItem(key, '0' + (value ? '1' : '0'));
                break;
            case 'number':
            case 'object':
                localStorage.setItem(key, '3' + JSON.stringify(value));
                // localStorage.setItem(key, '3' + JSON.stringify(value));
                break;
            default:
                localStorage.setItem(key, setType[type] + value);
        }
        return value;
    }

    // Get Value ---------------------------------------------------------------

    else if (key && !value && !not_exit) {
        let item = localStorage.getItem(key);
        if (item) {
            type = getType[item.slice(0, 1)];
            value = item.slice(1, item.length);
            switch (type) {
                case 'boolean':
                    return value == '1' ? true : false;
                    break;
                case 'object':
                    return JSON.parse(value);
                    break;
                default:
                    return value;
            }
        }
    }

    // Get if exists or set a value --------------------------------------------

    else if (key && value && not_exit) {
        let item = localStorage.getItem(key);
        if (item) {
            type = getType[item.slice(0, 1)];
            value = item.slice(1, item.length);
            switch (type) {
                case 'boolean':
                    return value == '1' ? true : false;
                    break;
                case 'object':
                    return JSON.parse(value);
                    break;
                default:
                    return value;
            }
        } else {
            type = typeof value;
            switch (type) {
                case 'boolean':
                    localStorage.setItem(key, '0' + (value ? '1' : '0'));
                    break;
                case 'number':
                case 'object':
                    localStorage.setItem(key, '3' + JSON.stringify(value));
                    break;
                default:
                    localStorage.setItem(key, setType[type] + value);
            }
            return value;
        }
    }

    // GET ALL -----------------------------------------------------------------

    else if (!key && !value) {
        let loop = [];
        for (i in localStorage) {
            loop[i] = local(i);
        }
        return loop;
    }

    // let _lsTotal = 0, _xLen ,_x;
    // for (_x in localStorage) {
    //     _xLen= ((localStorage[_x].length + _x.length) * 2);
    //     _lsTotal += _xLen;
    //     console.log(_x.substr(0,50) + ' = ' + (_xLen/1024).toFixed(2) + ' KB');
    // };
    // console.log('Total = ' + (_lsTotal / 1024).toFixed(2) + ' KB');
};

module.exports = local;

// rMello = function(selector, context) {
//     return new rMello.fn.init(selector, context);
// }
//
// rMello.fn = rMello.prototype = {
//     init: function( selector, context, root ) {
//         if (!selector) {
//            return this;
//         }
//         if (typeof selector === "string") {
//             console.log('funcionou');
//         }
//     }
// }
